
#define AnalyzeLightBSM_cxx
#include "AnalyzeLightBSM.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <fstream>
#include"TGraphErrors.h"
#include"TGraphAsymmErrors.h"

using namespace std;

int main(int argc, char* argv[])
{

  if (argc < 2) {
    cerr << "Please give 3 arguments " << "runList " << " " << "outputFileName" << " " << "dataset" << endl;
    return -1;
  }
  const char *inputFileList = argv[1];
  const char *outFileName   = argv[2];
  const char *data          = argv[3];

  AnalyzeLightBSM ana(inputFileList, outFileName, data);
  cout << "dataset " << data << " " << endl;

  ana.EventLoop(data,inputFileList);

  return 0;
}

void AnalyzeLightBSM::EventLoop(const char *data,const char *inputFileList) {
  if (fChain == 0) return;

  Long64_t nentries = fChain->GetEntriesFast();
  cout << "nentries " << nentries << endl;
  cout << "Analyzing dataset " << data << " " << endl;
  //Weight 
  //  NumEvents = nentries;
  //cout<<Weight<<endl;
  //Weight = CrossSection/NumEvents;    
  //  wt = Weight*1000.0*35.9;
  TString s_data=data;
  Long64_t nbytes = 0, nb = 0;
  int decade = 0;

  for (Long64_t jentry=0; jentry<nentries;jentry++)
    {
      wt = Weight*1000.0;//*35.9;
      //           cout<<Weight<<endl;
    // ==============print number of events done == == == == == == == =
    double progress = 10.0 * jentry / (1.0 * nentries);
    int k = int (progress);
    if (k > decade)
      cout << 10 * k << " %" << endl;
    decade = k;
    

    // ===============read this entry == == == == == == == == == == == 
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;
    //my code starts from here .... 19Aug2020
    int branch_size = (*GenParticles).size();
    
    //veto events with muon and lepton 
    if(NMuons ==0 && NElectrons==0)
      {
	if(isoElectronTracks==0 && isoMuonTracks ==0)// && isoPionTracks==0)//veto isolated leptons
	  {
	    if(MET>100)
	      {
		TLorentzVector bestPhoton=getBestPhoton();
		if(bestPhoton.Pt()>100)
		  {
		    //selection//  for best jets
		    int minDRindx=-100,phoMatchingJetIndx=-100,nHadJets=0;
		    double minDR=99999,ST=0;
		    vector<TLorentzVector> hadJets;
		    for(int i=0;i<Jets->size();i++){
		      if( ((*Jets)[i].Pt() > 30.0) && (abs((*Jets)[i].Eta()) <= 2.4) ){
		    	if( !(minDR < 0.3 && i==minDRindx) )
		    	  hadJets.push_back((*Jets)[i]);
		      }
		    }
		    if( minDR<0.3 ) phoMatchingJetIndx=minDRindx;
		    for(int i=0;i<hadJets.size();i++){
		      if( (abs(hadJets[i].Eta()) < 2.4) ){ST=ST+(hadJets[i].Pt());}
		      if( (abs(hadJets[i].Eta()) < 2.4) ){nHadJets++;}
		    }
		    if( minDR<0.3 ) ST=ST+bestPhoton.Pt();
		    /////cout<<nHadJets<<endl;
		    if( (nHadJets >= 2) )
		      {
			//St selection
			if(bestPhoton.Pt()>190 && ST >500)
			  {
			    h_photonPt->Fill(bestPhoton.Pt(),wt);
			    h_njets->Fill(NJets,wt);
			    h_MET->Fill(MET,wt);
			    h_bjets->Fill(BTags,wt);
			  }
			else if(bestPhoton.Pt()>100 && ST >800)
			  {
			    h_photonPt->Fill(bestPhoton.Pt(),wt);
                            h_njets->Fill(NJets,wt);
                            h_MET->Fill(MET,wt);
                            h_bjets->Fill(BTags,wt);
                          }
			else
			  continue;
		      }
		  }
	      }
	  }
      }
    }   // loop over entries
  //h_photonPt->Draw();
  //  h->Write();
}
TLorentzVector AnalyzeLightBSM::getBestPhoton(){
  TLorentzVector v1;
  vector<TLorentzVector> goodPho;
  for(int iPhoton=0;iPhoton<Photons->size();iPhoton++){
    if( ((*Photons_fullID)[iPhoton]) && ((*Photons_hasPixelSeed)[iPhoton]<0.001) ) goodPho.push_back( (*Photons)[iPhoton] );
  }

  if(goodPho.size()==0) return v1;
  sortTLorVec(&goodPho);
  return goodPho[0];
  
}



